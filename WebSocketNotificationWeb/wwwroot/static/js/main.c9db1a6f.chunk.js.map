{"version":3,"sources":["componenets/header/header-items.js","constants/Nav-items.js","constants/CDN-endpoint.js","componenets/header/notification-dropdown.js","componenets/header/header.js","componenets/footer/mobile-nav.js","constants/BarChart-options.js","componenets/content/dashboard/doughnut-chart.js","componenets/content/dashboard/dashboard.js","componenets/content/shipment/shiipment-columns.js","constants/Fetch-header.js","constants/REST-check.js","constants/Server-endpoint.js","constants/API-config.js","componenets/content/shipment/shipment.js","socket/Connection.js","constants/Loading.js","App.js","serviceWorker.js","index.js"],"names":["HeaderItems","label","link","activeNav","subNavItems","NavItems","MANAGE","ADMIN","DASHBOARD","SHIPMENT","CDNEndpoint","NotificationDropDown","readNotification","notification","_this","props","hubConnection","invoke","sessionStorage","getItem","id","catch","err","console","error","alert","_this2","this","notifications","notificationItems","length","log","react_default","a","createElement","className","map","onClick","alt","src","orderNo","dist_default","updatedDate","message","Component","OutsideClick","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setWrapperRef","bind","assertThisInitialized","handleClickOutside","state","clicked","document","addEventListener","removeEventListener","node","wrapperRef","event","contains","target","setState","hideDropdown","ref","children","Header","launch","e","ApplicationURL","preventDefault","window","location","searchSwitcher","AppSwitcherUl","i","storeApplicationName","searchValue","value","toUpperCase","searchName","name","AppSwitcher","AppSwitcherLi","g","defineProperty","result","forEach","v","ApplicationName","includes","push","key","AppSwitcherTrim","collapseDropdown","item","profileDropdown","activeProfile","appsDropdown","activeApps","adminDropdown","activePage","activeAdmin","activeUpload","activeInventory","activeProposals","activeManage","hideAppSwitcher","getUserImage","size","viewAllApps","viewAllAppsUrl","startLoading","pageLoading","endLoading","logout","logOutUrl","origin","activeRole","totalRecords","dataLimit","startIndex","pageNumber","endIndex","disablePre","disableNext","noApp","AppSwitcherContent","currentLocation","pathname","split","accessItems","display","_this3","Link","to","width","height","index","getNavItemClass","concat","header_OutsideClick","toggleDropdown","style","getDropdown","subItem","aria-hidden","notification_dropdown","defaultValue","type","MobileNav","toggleSubMenu","nodeItem","parentNode","subItems","icon","classList","nextSibling","childNodes","firstChild","remove","add","stopPropagation","showNav","body","scrollTop","documentElement","getNavClass","toggleMobileNav","BarChartOptions","maintainAspectRatio","legend","scales","xAxes","gridLines","zeroLineColor","color","ticks","fontColor","yAxes","Chart","pluginService","register","beforeDraw","chart","config","options","elements","center","ctx","centerConfig","fontStyle","txt","text","sidePaddingCalculated","sidePadding","innerRadius","font","stringWidth","measureText","widthRatio","newFontSize","Math","floor","elementHeight","fontSizeToUse","min","textAlign","textBaseline","centerX","chartArea","left","right","centerY","top","bottom","fillStyle","fillText","DoughNut","es","data","reportData","progress","labels","position","Dashboard","awaiting","filter","status","orderStatus","awaitingData","orderStatusPercentage","processing","processingData","shipped","shippedData","intransit","intransitData","dw","dwData","dispatched","dispatchedData","delivered","deliveredData","doughnutData","datasets","backgroundColor","hoverBackgroundColor","BarData","borderColor","borderWidth","hoverBorderColor","doughnut_chart","ShipmentColumns","headerClassName","accessor","FetchHeader","Headers","append","RestCheck","response","ok","Error","toString","json","ServerEndpoint","API","CONNECTION_ENDPOINT","GET_ORDERS","GET_ORDER","GET_SHIPMENT_STATUS_LIST","POST_UPDATE_ORDER_STATUS","Shipment","handleChange","getOrders","fetch","headers","credentials","then","responseJSON","shipmentData","selectRow","original","selectedRows","removeSelected","parent","checked","table","getElementsByClassName","checkboxRows","hideContextRibbon","showModal","closeModal","editOrder","ID","selectedOrder","Order","selectedStatus","OrderShipmentStatusList","IsCurrentStatus","ShipmentStatusID","updateOrderStatus","orderID","shipmentStatusID","notes","StatusNote","method","JSON","stringify","loadNotifications","shipmentStatus","selectAll","columns","Cell","_ref","onChange","sortable","toConsumableArray","damco_components_lib","modalType","title","closeMethod","primaryMethod","primaryButtonTitle","secondaryMethod","secondaryButtonTitle","obj","Status","Customer","role","aria-label","react_table_es","minRows","showPagination","onExpandedChange","newExpanded","expanded","Connection","currentUser","messages","prompt","setItem","signalR","withUrl","configureLogging","Trace","build","setConnectionMethod","start","closeLoadingMethod","on","user","receivedMessages","setNotificationMethod","setReportDataMethod","Loading","App","setNotifications","setReportData","setHubConnection","connection","closeLoading","setAdmin","BrowserRouter","constants_Loading","header","socket_Connection","nf","con","rd","Route","exact","path","render","match","dashboard","shipment","mobile_nav","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9db1a6f.chunk.js","sourcesContent":["const HeaderItems = [\r\n    {\r\n        label: \"Dashboard\",\r\n        link: \"/\",\r\n        activeNav: \"dashboard\",\r\n        subNavItems:[]\r\n    },\r\n    {\r\n        label: \"Orders\",\r\n        link: \"/shipment\",\r\n        activeNav: \"shipment\",\r\n        subNavItems:[]\r\n    }/*,\r\n    {\r\n        label: \"Manage\",\r\n        link: \"/manage\",\r\n        activeNav: \"manage\",\r\n        subNavItems:[]\r\n    },\r\n    {\r\n        label: \"Admin\",\r\n        link: \"#\",\r\n        activeNav: \"admin\",\r\n        subNavItems:[\r\n            {\r\n                label: \"User Management\",\r\n                link: \"/admin\",\r\n                activeNav: \"admin\"\r\n            },\r\n            {\r\n                label: \"Customer Management\",\r\n                link: \"/admin\",\r\n                activeNav: \"admin\"\r\n            },\r\n        ]\r\n    }*/\r\n];\r\n\r\nexport default HeaderItems;","const NavItems = {\r\n    MANAGE: 'manage',\r\n    ADMIN: 'admin',\r\n    DASHBOARD: 'dashboard',\r\n    SHIPMENT: 'shipment'\r\n};\r\n\r\nexport default NavItems;","const CDNEndpoint = \"https://cdn.damco.com/cortex/v1\";\r\n\r\nexport default CDNEndpoint;","import React, {Component} from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nclass NotificationDropDown extends Component {\r\n\r\n    readNotification = (notification) => {\r\n        this.props.hubConnection\r\n            .invoke('ReadNotification', sessionStorage.getItem('currentUser'), notification.id)\r\n            .catch(err => console.error(err));\r\n        alert(\"Notification successfully read\");\r\n    };\r\n\r\n    render() {\r\n        const notifications = this.props.notificationItems.length > 0 ? this.props.notificationItems : [];\r\n        console.log(\"Inside dropdown component\",notifications);\r\n\r\n        return (\r\n            <div className=\"app-switcher\">\r\n                <div className=\"apps-container\">\r\n                    <div className=\"apps-wrapper\">\r\n                        <div>\r\n                            {\r\n                                notifications.map((notification) => {\r\n                                    return (\r\n                                        <div className=\"app-switcher-item\" onClick={() => this.readNotification(notification)}>\r\n                                            <div className=\"app-switcher-item-icon-container\">\r\n                                                <div className=\"image-cropper\">\r\n                                                    <img alt=\"\"\r\n                                                         src=\"https://cdn.damco.com/cortex/v1/images/sample/1.png\"\r\n                                                         className=\"app-switcher-item-icon\"/>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"app-switcher-item-text-container\">\r\n                                                <span\r\n                                                    className=\"regular-link-text app-switcher-item-text\">Order #{notification.orderNo}</span>\r\n                                                <div className=\"small-inactive-text\">\r\n                                                    <Moment>{notification.updatedDate}</Moment>\r\n                                                </div>\r\n                                                <span className=\"small-body-text\">{notification.message}</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotificationDropDown;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport HeaderItems from \"./header-items\";\r\nimport NavItems from \"../../constants/Nav-items\";\r\nimport CDNEndpoint from \"../../constants/CDN-endpoint\";\r\nimport NotificationDropDown from \"./notification-dropdown\";\r\nimport './notification.css';\r\n\r\n/**\r\n * Component that alerts if you click outside of it\r\n */\r\nclass OutsideClick extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n\r\n        this.state = {\r\n            clicked: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /**\r\n     * Set the wrapper ref\r\n     */\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    /**\r\n     * Alert if clicked on outside of element\r\n     */\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.setState({clicked: true});\r\n            this.props.hideDropdown();\r\n        } else {\r\n            this.setState({clicked: false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.setWrapperRef} className={\"dropdown-wrapper\"}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activePage: NavItems.DASHBOARD,\r\n            activeUpload: true,\r\n            activeInventory: false,\r\n            activeProposals: false,\r\n            activeManage: false,\r\n            activeAdmin: false,\r\n            activeProfile: false,\r\n            activeApps: false,\r\n            profileDropdown: false,\r\n            appsDropdown: false,\r\n            adminDropdown: false,\r\n            pageLoading: false,\r\n            activeRole: 0,\r\n\r\n            // variables for pagination\r\n            result: [],\r\n            totalRecords: 0,\r\n            dataLimit: 5,\r\n            startIndex: 1,\r\n            pageNumber: 1,\r\n            endIndex: 5,\r\n            disablePre: true,\r\n            disableNext: false,\r\n\r\n            searchSwitcher: '',\r\n            noApp: false,\r\n            viewAllAppsUrl: '',\r\n            AppSwitcherContent: null,\r\n            AppSwitcherTrim: []\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let currentLocation = window.location.pathname.split(\"/\")[1];\r\n        (currentLocation === \"\") ? this.activeNav(\"User Management\", \"dashboard\") : this.activeNav(\"User Management\", currentLocation);\r\n    }\r\n\r\n    launch = (e, ApplicationURL) => {\r\n        e.preventDefault();\r\n        window.location = ApplicationURL;\r\n    };\r\n\r\n    searchSwitcher = (e) => {\r\n        e.preventDefault();\r\n        let storeApplicationName = [], searchValue = e.target.value.toUpperCase(), searchName = e.target.name,\r\n            AppSwitcher = [], AppSwitcherLi = [], AppSwitcherUl, i, g = -1;\r\n        this.setState({\r\n            [searchName]: e.target.value\r\n        });\r\n        if (this.state.result.length > 0) {\r\n            this.state.result.forEach((v) => {\r\n                if (v.ApplicationName.toUpperCase().includes(searchValue)) {\r\n                    storeApplicationName.push(v);\r\n                }\r\n            });\r\n\r\n            for (i = 0; i <= storeApplicationName.length; i += 4) {\r\n                /*mapCallBack(i, that);*/\r\n\r\n                AppSwitcherUl = <div key={g} className={\"apps-by-category home\"}>\r\n                    <ul>\r\n                        {AppSwitcherLi}\r\n                    </ul>\r\n                </div>;\r\n\r\n                AppSwitcherLi = [];\r\n                g = AppSwitcher.length;\r\n                AppSwitcher[g] = AppSwitcherUl;\r\n            }\r\n\r\n            this.setState({\r\n                AppSwitcherTrim: storeApplicationName.length > 0 ? AppSwitcher : 'Result not found!'\r\n            })\r\n        }\r\n    };\r\n\r\n    collapseDropdown = (item) => {\r\n        if (item === 'profile') {\r\n            this.setState({\r\n                profileDropdown: false,\r\n                activeProfile: false\r\n            });\r\n        } else if (item === 'apps') {\r\n            this.setState({\r\n                appsDropdown: false,\r\n                activeApps: false\r\n            });\r\n        } else if (item === NavItems.ADMIN) {\r\n            this.setState({\r\n                adminDropdown: false\r\n            });\r\n\r\n            if (this.state.activePage !== NavItems.ADMIN) {\r\n                this.setState({\r\n                    activeAdmin: false\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    activeNav = (e, item) => {\r\n        if (item === 'upload') {\r\n            this.setState({\r\n                activePage: 'upload',\r\n                activeUpload: true,\r\n                activeInventory: false,\r\n                activeProposals: false,\r\n                activeManage: false,\r\n                activeAdmin: false\r\n            });\r\n        } else if (item === NavItems.DASHBOARD) {\r\n            this.setState({\r\n                activePage: NavItems.DASHBOARD,\r\n                activeUpload: false,\r\n                activeInventory: true,\r\n                activeProposals: false,\r\n                activeManage: false,\r\n                activeAdmin: false\r\n            });\r\n        } else if (item === NavItems.SHIPMENT) {\r\n            this.setState({\r\n                activePage: NavItems.SHIPMENT,\r\n                activeUpload: false,\r\n                activeInventory: false,\r\n                activeProposals: true,\r\n                activeManage: false,\r\n                activeAdmin: false\r\n            });\r\n        } else if (item === NavItems.MANAGE) {\r\n            this.setState({\r\n                activePage: NavItems.MANAGE,\r\n                activeUpload: false,\r\n                activeInventory: false,\r\n                activeProposals: false,\r\n                activeManage: true,\r\n                activeAdmin: false\r\n            });\r\n        } else if (item === NavItems.ADMIN) {\r\n            this.setState({\r\n                activePage: NavItems.ADMIN,\r\n                activeUpload: false,\r\n                activeInventory: false,\r\n                activeProposals: false,\r\n                activeManage: false,\r\n                activeAdmin: true,\r\n                adminDropdown: false\r\n            });\r\n        }\r\n    };\r\n\r\n    getNavItemClass(item) {\r\n        if (this.props.accessItems.includes(item) || item === 'profile' || item === 'apps') {\r\n            if (item === NavItems.DASHBOARD) return (this.state.activeInventory) ? 'nav-item active' : 'nav-item';\r\n            else if (item === NavItems.SHIPMENT) return (this.state.activeProposals) ? 'nav-item active' : 'nav-item';\r\n            else if (item === NavItems.MANAGE) return (this.state.activeManage) ? 'nav-item active' : 'nav-item';\r\n            else if (item === NavItems.ADMIN) return (this.state.activeAdmin) ? 'nav-item dropdown active' : 'nav-item dropdown';\r\n            else if (item === 'profile') return (this.state.activeProfile) ? 'icon-button active' : 'icon-button';\r\n            else if (item === 'apps') return (this.state.activeApps) ? 'icon-button active' : 'icon-button';\r\n        } else {\r\n            return 'hidden';\r\n        }\r\n    }\r\n\r\n    toggleDropdown(item, event) {\r\n        event.preventDefault();\r\n        if (item === 'profile') {\r\n            this.setState({\r\n                profileDropdown: !this.state.profileDropdown,\r\n                activeProfile: !this.state.activeProfile\r\n            });\r\n        } else if (item === 'apps') {\r\n            this.setState({\r\n                activeApps: !this.state.activeApps,\r\n                appsDropdown: !this.state.appsDropdown\r\n            });\r\n        } else if (item === NavItems.ADMIN) {\r\n            this.setState({\r\n                adminDropdown: !this.state.adminDropdown\r\n            });\r\n\r\n            if (this.state.activePage !== NavItems.ADMIN) {\r\n                this.setState({\r\n                    activeAdmin: !this.state.activeAdmin\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    hideAppSwitcher = () => {\r\n        this.setState({\r\n            appsDropdown: !this.state.appsDropdown,\r\n            activeApps: !this.state.activeApps\r\n        })\r\n    };\r\n\r\n    getDropdown(item) {\r\n        return (item === 'profile' && this.state.profileDropdown) ? {display: 'block'} :\r\n            ((item === 'admin' && this.state.adminDropdown) ? {display: 'block'} :\r\n                ((item === 'apps' && this.state.appsDropdown) ? {display: 'block'} : {display: 'none'}));\r\n    }\r\n\r\n    getUserImage = (size) => {\r\n        if (size === \"small\")\r\n            return (\r\n                <img className=\"fa user-profile-photo\"\r\n                     src={CDNEndpoint + \"/images/icons/DefaultProfileImg32.png\"}\r\n                     alt=\"profile\"/>\r\n            );\r\n        else\r\n            return (\r\n                <img src={CDNEndpoint + \"/images/icons/DefaultProfileImg64.png\"}\r\n                     alt=\"profile\"/>\r\n            );\r\n    };\r\n\r\n    viewAllApps = () => {\r\n        window.location = this.state.viewAllAppsUrl;\r\n    };\r\n\r\n    startLoading = () => {\r\n        this.setState({\r\n            pageLoading: true\r\n        });\r\n    };\r\n\r\n    endLoading = () => {\r\n        this.setState({\r\n            pageLoading: false\r\n        });\r\n    };\r\n\r\n    logout = (e) => {\r\n        e.preventDefault();\r\n        let logOutUrl = window.location.origin + \"/User/SignOut/\";\r\n        window.location = logOutUrl;\r\n    };\r\n\r\n    render() {\r\n        const notifications = this.props.notificationItems;\r\n        return (\r\n            <header className=\"ds-header app-logged-in\">\r\n                <nav className=\"navbar large-nav-menu\">\r\n                    <Link to=\"/\" className=\"navbar-brand\" onClick={(e) => this.activeNav(e, NavItems.DASHBOARD)}>\r\n                        <img src={CDNEndpoint + \"/images/logos/DamcoPortal.svg\"}\r\n                             alt=\"Logo - Maersk\" width={32} height={32}/>\r\n                    </Link>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n                        <ul className=\"navbar-nav\">\r\n                            {\r\n                                HeaderItems.map((item, index) => {\r\n                                    if (item.link === \"#\") {\r\n                                        return (\r\n                                            <li className={this.getNavItemClass(item.activeNav)} key={`item-${index}`}>\r\n                                                <OutsideClick\r\n                                                    hideDropdown={() => this.collapseDropdown(item.activeNav)}>\r\n                                                    <Link to=\"\"\r\n                                                          onClick={(event) => this.toggleDropdown(item.activeNav, event)}\r\n                                                          className=\"dropdown-toggle\">\r\n                                                        {item.label}\r\n                                                        <i className=\"fa fa-angle-down\"/>\r\n                                                    </Link>\r\n                                                    <ul className=\"dropdown-menu\"\r\n                                                        style={this.getDropdown(item.activeNav)}>\r\n                                                        {\r\n                                                            item.subNavItems.map((subItem, index) => {\r\n                                                                return (\r\n                                                                    <li key={`subItem-${index}`}>\r\n                                                                        {\r\n                                                                            (index !== 0 && index % 4 === 0) ?\r\n                                                                                <li className=\"divider\"/> : \"\"\r\n                                                                        }\r\n                                                                        <Link to={subItem.link}\r\n                                                                              onClick={(e) => this.activeNav(e, subItem.activeNav)}>\r\n                                                                            {subItem.label}\r\n                                                                        </Link>\r\n                                                                    </li>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </ul>\r\n                                                </OutsideClick>\r\n                                            </li>\r\n                                        )\r\n                                    } else {\r\n                                        return (\r\n                                            <li className={this.getNavItemClass(item.activeNav)} key={`item-${index}`}>\r\n                                                <Link to={item.link} onClick={(e) => this.activeNav(e, item.activeNav)}\r\n                                                      className=\"nav-link link\">\r\n                                                    {item.label}\r\n                                                </Link>\r\n                                            </li>\r\n                                        )\r\n                                    }\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"icon-bar\">\r\n                        <OutsideClick hideDropdown={() => this.collapseDropdown('apps')}>\r\n                            <Link to=\"#\" className={this.getNavItemClass('apps')}\r\n                                  onClick={(event) => this.toggleDropdown('apps', event)}>\r\n                                <i className=\"fa fa-bell\" aria-hidden=\"true\"/>\r\n                                <span>{notifications.length}</span>\r\n                            </Link>\r\n                            <div className=\"dropdown-content info-dropdown app-switcher-panel\"\r\n                                 style={this.getDropdown('apps')}>\r\n                                <NotificationDropDown\r\n                                    notificationItems={notifications}\r\n                                    hubConnection={this.props.hubConnection}\r\n                                />\r\n                            </div>\r\n                        </OutsideClick>\r\n                        <OutsideClick hideDropdown={() => this.collapseDropdown('profile')}>\r\n                            <Link to=\"#\" className={this.getNavItemClass('profile')}\r\n                                  onClick={(event) => this.toggleDropdown('profile', event)}>\r\n                                {\r\n                                    this.getUserImage('small')\r\n                                }\r\n                            </Link>\r\n                            <div id=\"dropdown1\" className=\"dropdown-content info-dropdown\"\r\n                                 style={this.getDropdown('profile')}>\r\n                                <ul className=\"dropdown-content-area\">\r\n                                    <li className=\"dropdown-profile-picture\">\r\n                                        {\r\n                                            this.getUserImage('large')\r\n                                        }\r\n                                    </li>\r\n                                    <li className=\"dropdown-details\">\r\n                                        <p>\r\n                                            <strong>User name</strong><br/>\r\n                                            {sessionStorage.getItem('currentUser')}<br/>\r\n                                            xxxxxxxxxx\r\n                                        </p>\r\n                                    </li>\r\n                                </ul>\r\n                                <div className=\"dropdown-profile-role vertical-form\">\r\n                                    <div className=\"form-group\">\r\n                                        <label>Role</label>\r\n                                        <select defaultValue={this.state.activeRole}\r\n                                                className=\"form-control\">\r\n                                            <option key=\"role-11\" value={1}>Admin</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dropdown-button-footer nav-dropdown-footer\">\r\n                                    <button type=\"button\" className=\"button-large button-transparent hidden\">View\r\n                                        Profile\r\n                                    </button>\r\n                                    <button type=\"button\" className=\"button-large button-transparent\"\r\n                                            onClick={this.logout}>Logout\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </OutsideClick>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport HeaderItems from \"../header/header-items\";\r\n\r\nclass MobileNav extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showNav: false\r\n        }\r\n    }\r\n\r\n    toggleMobileNav() {\r\n        document.body.scrollTop = 0;\r\n        document.documentElement.scrollTop = 0;\r\n        this.setState({\r\n            showNav: !this.state.showNav\r\n        });\r\n    }\r\n\r\n    getNavClass() {\r\n        return (this.state.showNav) ? \"has-sub sub-active close-nav-btn\" : \"has-sub news\";\r\n    }\r\n\r\n    toggleSubMenu = (event) => {\r\n        let nodeItem = event.target.parentNode;\r\n        let subItems = null;\r\n        let icon = null;\r\n        if (nodeItem.classList.contains(\"nav-mobile-title\")) {\r\n            subItems = nodeItem.nextSibling;\r\n            icon = nodeItem.childNodes[1];\r\n        } else if (nodeItem.classList.contains(\"nav-mobile-column\")) {\r\n            subItems = nodeItem.childNodes[1];\r\n            icon = nodeItem.firstChild.childNodes[1];\r\n        }\r\n\r\n        if (subItems !== null) {\r\n            (subItems.classList.contains(\"hidden\")) ? subItems.classList.remove(\"hidden\") : subItems.classList.add(\"hidden\");\r\n        }\r\n\r\n        if (icon !== null) {\r\n            if (icon.classList.contains(\"fa-chevron-up\")) {\r\n                icon.classList.remove(\"fa-chevron-up\");\r\n                icon.classList.add(\"fa-chevron-down\");\r\n            } else if (icon.classList.contains(\"fa-chevron-down\")) {\r\n                icon.classList.remove(\"fa-chevron-down\");\r\n                icon.classList.add(\"fa-chevron-up\");\r\n            }\r\n        }\r\n\r\n        event.stopPropagation();\r\n    };\r\n\r\n    getNavItemClass = (item) => {\r\n        //console.log(item);\r\n        if(this.props.accessItems.includes(item)){\r\n            return \"nav-mobile-column\";\r\n        }else {\r\n            return \"hidden\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"footer-nav mobile-display-gray\">\r\n                <ul>\r\n                    <li className={this.getNavClass()} onClick={() => this.toggleMobileNav()}>\r\n                        <ul className=\"submenu submenu-small\">\r\n                            <li className=\"nav-column-row\">\r\n                                {\r\n                                    HeaderItems.map((item, index) => {\r\n                                        if (item.link === \"#\") {\r\n                                            return (\r\n                                                <div className={this.getNavItemClass(item.activeNav)} key={`item-${index}`}>\r\n                                                    <div className={\"nav-mobile-title\"}\r\n                                                         onClick={(event) => this.toggleSubMenu(event)}>\r\n                                                        <span>{item.label}</span>\r\n                                                        <i className=\"fa fa-chevron-up\" aria-hidden=\"true\"/>\r\n                                                    </div>\r\n                                                    <ul className={\"sub-nav-items\"}>\r\n                                                        {\r\n                                                            item.subNavItems.map((subItem, index) => {\r\n                                                                return (\r\n                                                                    <li key={`subItem-${index}`}>\r\n                                                                        <Link to={subItem.link}>{subItem.label}</Link>\r\n                                                                    </li>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </ul>\r\n                                                </div>\r\n                                            )\r\n                                        } else {\r\n                                            return (\r\n                                                <div className={this.getNavItemClass(item.activeNav)} key={`item-${index}`}>\r\n                                                    <div className={\"nav-mobile-title\"}>\r\n                                                        <Link to={item.link}>{item.label}</Link>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MobileNav;","const BarChartOptions = {\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n        display: false\r\n    },\r\n    scales: {\r\n        xAxes: [{\r\n            gridLines: {\r\n                zeroLineColor: '#8C8C8C',\r\n                color: '#C6C6C6'\r\n            },\r\n            ticks: {\r\n                fontColor: '#282828'\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            gridLines: {\r\n                zeroLineColor: '#8C8C8C',\r\n                color: '#C6C6C6'\r\n            },\r\n            ticks: {\r\n                fontColor: '#282828'\r\n            }\r\n        }]\r\n    }\r\n};\r\n\r\nexport default BarChartOptions;","import React, {Component} from 'react';\r\nimport {Doughnut, Chart} from 'react-chartjs-2';\r\n\r\n/* Add extension for doughnut chart center text */\r\nChart.pluginService.register({\r\n    beforeDraw: function (chart) {\r\n        if (chart.config.options.elements.center) {\r\n            //Get ctx from string\r\n            let ctx = chart.chart.ctx;\r\n\r\n            //Get options from the center object in options\r\n            let centerConfig = chart.config.options.elements.center;\r\n            let fontStyle = centerConfig.fontStyle || 'Arial';\r\n            let txt = centerConfig.text;\r\n            let color = centerConfig.color || '#000';\r\n            let sidePadding = centerConfig.sidePadding || 20;\r\n            let sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2);\r\n            //Start with a base font of 30px\r\n            ctx.font = \"30px \" + fontStyle;\r\n\r\n            //Get the width of the string and also the width of the element minus 10 to give it 5px side padding\r\n            let stringWidth = ctx.measureText(txt).width;\r\n            let elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;\r\n\r\n            // Find out how much the font can grow in width.\r\n            let widthRatio = elementWidth / stringWidth;\r\n            let newFontSize = Math.floor(30 * widthRatio);\r\n            let elementHeight = (chart.innerRadius * 2);\r\n\r\n            // Pick a new font size so it will not be larger than the height of label.\r\n            let fontSizeToUse = Math.min(newFontSize, elementHeight);\r\n\r\n            //Set font settings to draw it correctly.\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            let centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);\r\n            let centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2) + 4;\r\n            ctx.font = fontSizeToUse + \"px \" + fontStyle;\r\n            ctx.fillStyle = color;\r\n\r\n            //Draw text in center\r\n            ctx.fillText(txt, centerX, centerY);\r\n        }\r\n    }\r\n});\r\n\r\nclass DoughNut extends Component{\r\n    render(){\r\n        return(\r\n            <Doughnut data={this.props.reportData}\r\n                      width={512}\r\n                      height={256}\r\n                      options={{\r\n                          maintainAspectRatio: false,\r\n                          elements: {\r\n                              center: {\r\n                                  text: this.props.progress+'%',\r\n                                  color: '#282828', // Default is #000000\r\n                                  fontStyle: 'Arial', // Default is Arial\r\n                                  sidePadding: 20 // Defualt is 20 (as a percentage)\r\n                              }\r\n                          },\r\n                          legend: {\r\n                              labels: {\r\n                                  fontColor: '#282828'\r\n                              },\r\n                              position: 'bottom'\r\n                          }\r\n                      }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default DoughNut;","import React, {Component} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport BarChartOptions from \"../../../constants/BarChart-options\";\r\nimport DoughNut from \"./doughnut-chart\";\r\n\r\nclass Dashboard extends Component {\r\n\r\n    componentWillMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        const reportData = this.props.reportData;\r\n        const awaiting = reportData.filter((status) => status.orderStatus === \"Awaiting order\")[0];\r\n        const awaitingData = (awaiting)? awaiting.orderStatusPercentage : 0;\r\n        const processing = reportData.filter((status) => status.orderStatus === \"Order in processing\")[0];\r\n        const processingData = (processing)? processing.orderStatusPercentage : 0;\r\n        const shipped = reportData.filter((status) => status.orderStatus === \"Order shipped\")[0];\r\n        const shippedData = (shipped)? shipped.orderStatusPercentage : 0;\r\n        const intransit = reportData.filter((status) => status.orderStatus === \"Order in transit\")[0];\r\n        const intransitData = (intransit)? intransit.orderStatusPercentage : 0;\r\n        const dw = reportData.filter((status) => status.orderStatus === \"Order at destination warehouse\")[0];\r\n        const dwData = (dw)? dw.orderStatusPercentage : 0;\r\n        const dispatched = reportData.filter((status) => status.orderStatus === \"Order dispatched\")[0];\r\n        const dispatchedData = (dispatched)? dispatched.orderStatusPercentage : 0;\r\n        const delivered = reportData.filter((status) => status.orderStatus === \"Order delivered\")[0];\r\n        const deliveredData = (delivered)? delivered.orderStatusPercentage : 0;\r\n\r\n\r\n        const doughnutData = {\r\n            labels: ['Progress', 'Pending'],\r\n            datasets: [{\r\n                data: [deliveredData, 100-deliveredData],\r\n                backgroundColor: [\r\n                    '#64B2D4',\r\n                    '#C3C3C3'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#64B2D4',\r\n                    '#C3C3C3'\r\n                ]\r\n            }]\r\n        };\r\n\r\n        const BarData = {\r\n            labels: ['Awaiting', 'Processing', 'Shipped', 'In transit', 'At dest. warehouse', 'Dispatched'],\r\n            datasets: [{\r\n                label: '',\r\n                backgroundColor: ['rgba(0,62,94, 0.8)','rgba(163,220,175, 0.8)', 'rgba(25,90,60, 0.8)', 'rgba(230,216,184, 0.8)',\r\n                    'rgba(255,210,30, 0.8)', 'rgba(146,37,26, 0.8)'],\r\n                borderColor: ['rgba(0,62,94, 1)','rgba(163,220,175, 1)', 'rgba(25,90,60, 1)', 'rgba(230,216,184, 1)',\r\n                    'rgba(255,210,30, 1)', 'rgba(146,37,26, 1)'],\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: ['rgba(0,62,94, 0.8)','rgba(163,220,175, 0.8)', 'rgba(25,90,60, 0.8)', 'rgba(230,216,184, 0.8)',\r\n                    'rgba(255,210,30, 0.8)', 'rgba(146,37,26, 0.8)'],\r\n                hoverBorderColor: ['rgba(0,62,94, 1)',\r\n                    'rgba(163,220,175, 1)', 'rgba(25,90,60, 1)', 'rgba(230,216,184, 1)', 'rgba(255,210,30, 1)',\r\n                    'rgba(146,37,26, 1)'],\r\n                data: [awaitingData, processingData, shippedData, intransitData, dwData, dispatchedData]\r\n            }]\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"grid-wrapper\">\r\n                    <div className=\"col-30\">\r\n                        <h3 className=\"title-blue-underline\">Delivered shipment</h3>\r\n                        <div>\r\n                            <DoughNut reportData={doughnutData} progress={deliveredData}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-70\">\r\n                        <h3 className=\"title-blue-underline\">Shipment status</h3>\r\n                        <div>\r\n                            <Bar data={BarData}\r\n                                 width={512}\r\n                                 height={256}\r\n                                 options={BarChartOptions}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","const ShipmentColumns = [\r\n    {\r\n        headerClassName: 'data-table header',\r\n        Header: \"Order ID\",\r\n        accessor: \"OrderNo\",\r\n        width: 150\r\n    },\r\n    {\r\n        headerClassName: 'data-table header',\r\n        Header: \"Customer\",\r\n        accessor: \"Customer\"\r\n    },\r\n    {\r\n        headerClassName: 'data-table header',\r\n        Header: \"Order details\",\r\n        accessor: \"OrderDetails\"\r\n    },\r\n    {\r\n        headerClassName: 'data-table header',\r\n        Header: \"Order status\",\r\n        accessor: \"ShipmentStaus\"\r\n    },\r\n    {\r\n        headerClassName: 'data-table header',\r\n        Header: \"Is delay\",\r\n        accessor: \"IsDelay\"\r\n    }\r\n];\r\n\r\nexport default ShipmentColumns;","const FetchHeader = new Headers();\r\nFetchHeader.append('pragma', 'no-cache');\r\nFetchHeader.append('cache-control', 'no-cache');\r\n\r\nexport default FetchHeader;","function RestCheck(response) {\r\n    if (!response.ok) {\r\n        console.log(\"ERROR\",response);\r\n        throw Error(response.status.toString());\r\n    }\r\n    return response.json();\r\n}\r\n\r\nexport default RestCheck;","const ServerEndpoint = /*\"https://techstormapi.azurewebsites.net\";*/\"https://localhost:44390\";\r\n\r\nexport default ServerEndpoint;","/* \"test\" environment for testing API and\r\n* \"build\" environment after integrated with back-end code\r\n* */\r\n\r\nimport ServerEndpoint from \"./Server-endpoint\";\r\n\r\nconst ENV = \"build\";\r\n\r\nconst API = (ENV === \"test\") ?\r\n{\r\n    CONNECTION_ENDPOINT: '/',\r\n    GET_ORDERS: '/test-data/get-order-list.json',\r\n    GET_ORDER: '/test-data/get-order.json',\r\n    GET_SHIPMENT_STATUS_LIST: '/test-data/get-status-list.json',\r\n    POST_UPDATE_ORDER_STATUS: '/'\r\n}\r\n:\r\n{\r\n    CONNECTION_ENDPOINT: ServerEndpoint + '/notify',\r\n    GET_ORDERS: ServerEndpoint + '/api/Notification/GetOrdersPerUser',\r\n    GET_ORDER: ServerEndpoint + '/api/Notification/GetOrderDetails',\r\n    GET_SHIPMENT_STATUS_LIST: ServerEndpoint + '/api/Notification/GetAllShipmentStatus',\r\n    POST_UPDATE_ORDER_STATUS: ServerEndpoint + '/api/Notification/UpdateShipmentStatus'\r\n};\r\n\r\nexport default API;","import React, {Component} from 'react';\r\nimport ReactTable from \"react-table\";\r\nimport ShipmentColumns from \"./shiipment-columns\";\r\nimport FetchHeader from \"../../../constants/Fetch-header\";\r\nimport RestCheck from \"../../../constants/REST-check\";\r\nimport API from \"../../../constants/API-config\";\r\nimport {ModalScreen} from 'damco-components';\r\n\r\nclass Shipment extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            selectedStatus: 1,\r\n            selectedOrder: {},\r\n            shipmentStatus: [],\r\n            shipmentData: [],\r\n            selectedRows: [],\r\n            selectAll: 0,\r\n            columns: [\r\n                {\r\n                    id: \"checkbox\",\r\n                    accessor: \"\",\r\n                    className: \"-checkbox\",\r\n                    Cell: ({original}) => {\r\n                        return (\r\n                            <input\r\n                                type=\"radio\"\r\n                                name={\"rowOption\"}\r\n                                className=\"checkbox\"\r\n                                checked={this.state.selectedRows.includes(original) === true}\r\n                                onChange={(event) => this.selectRow(event, original)}\r\n                            />\r\n                        );\r\n                    },\r\n                    sortable: false,\r\n                    width: 45\r\n                }, ...ShipmentColumns\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        fetch(API.GET_SHIPMENT_STATUS_LIST, {\r\n            headers: FetchHeader,\r\n            credentials: 'same-origin'\r\n        }).then((response) => {\r\n            return RestCheck(response);\r\n        }).then((responseJSON) => {\r\n            this.setState({\r\n                shipmentStatus: responseJSON\r\n            }, () => {\r\n                this.getOrders();\r\n            });\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const state = this.state;\r\n        state[event.target.name] = event.target.value;\r\n        this.setState(state);\r\n    };\r\n\r\n    getOrders = () => {\r\n        fetch(API.GET_ORDERS + \"?userID=\" + sessionStorage.getItem('currentUser'), {\r\n            headers: FetchHeader,\r\n            credentials: 'same-origin'\r\n        }).then((response) => {\r\n            return RestCheck(response);\r\n        }).then((responseJSON) => {\r\n            this.setState({\r\n                shipmentData: responseJSON\r\n            });\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    selectRow = (event, original) => {\r\n        this.setState({\r\n            selectedRows: [original]\r\n        });\r\n        this.removeSelected();\r\n        let parent = event.target.parentNode.parentNode.parentNode;\r\n        if (event.target.checked) {\r\n            parent.classList.add(\"-selected\");\r\n        } else {\r\n            parent.classList.remove(\"-selected\");\r\n        }\r\n    };\r\n\r\n    removeSelected = () => {\r\n        let table = document.getElementsByClassName('local-inv');\r\n        let checkboxRows = table.length > 0 ? table[0].getElementsByClassName('rt-tr-group') : document.getElementsByClassName('rt-tr-group');\r\n\r\n        for (let i = 0; i < checkboxRows.length; i++) {\r\n            if (checkboxRows[i].classList.contains('-selected')) checkboxRows[i].classList.remove('-selected');\r\n        }\r\n    };\r\n\r\n    hideContextRibbon = () => {\r\n        this.setState({\r\n            selectedRows: []\r\n        }, () => {\r\n            this.removeSelected()\r\n        });\r\n    };\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            showModal: true,\r\n        });\r\n    };\r\n\r\n    closeModal = () => {\r\n        this.setState({\r\n            showModal: false\r\n        });\r\n    };\r\n\r\n    editOrder = () => {\r\n        fetch(API.GET_ORDER + \"?orderID=\" + this.state.selectedRows[0].ID, {\r\n            headers: FetchHeader,\r\n            credentials: 'same-origin'\r\n        }).then((response) => {\r\n            return RestCheck(response);\r\n        }).then((responseJSON) => {\r\n            this.setState({\r\n                selectedOrder: responseJSON.Order,\r\n                selectedStatus: responseJSON.OrderShipmentStatusList.filter((status) => status.IsCurrentStatus === true)[0].ShipmentStatusID\r\n            }, () => {\r\n                console.log(this.state.selectedStatus);\r\n                this.showModal();\r\n            });\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    updateOrderStatus = () => {\r\n        const orderID = this.state.selectedOrder.ID;\r\n        const shipmentStatusID = this.state.selectedStatus;\r\n        const notes = this.state.StatusNote;\r\n\r\n        fetch(API.POST_UPDATE_ORDER_STATUS, {\r\n            method: 'POST',\r\n            headers: FetchHeader,\r\n            credentials: 'same-origin',\r\n            body: JSON.stringify({orderID, shipmentStatusID, notes})\r\n        }).then((response) => {\r\n            return RestCheck(response);\r\n        }).then((responseJSON) => {\r\n            this.getOrders();\r\n            this.closeModal();\r\n            this.loadNotifications();\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    loadNotifications = () => {\r\n        this.props.hubConnection\r\n            .invoke('LoadNotificationOnUpdateOrder', this.state.selectedOrder.ID)\r\n            .then(() => {\r\n                console.log('After shipment status update : LoadNotificationOnUpdateOrder called')\r\n            })\r\n            .catch(err => console.error(err, 'Error to call LoadNotificationOnUpdateOrder : after update status'));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    (this.state.showModal) ?\r\n                        <ModalScreen modalType={\"s\"} title={\"Modal title\"}\r\n                                     closeMethod={this.closeModal}\r\n                                     primaryMethod={this.updateOrderStatus} primaryButtonTitle={\"Update\"}\r\n                                     secondaryMethod={this.closeModal} secondaryButtonTitle={\"Close\"}>\r\n                            <div className={\"grid-wrapper\"}>\r\n                                <div className={\"col-100\"}>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Shipment status</label>\r\n                                        <select name={\"selectedStatus\"} className=\"form-control\"\r\n                                                value={this.state.selectedStatus} onChange={this.handleChange}>\r\n                                            <option/>\r\n                                            {\r\n                                                (this.state.shipmentStatus.length > 0) ?\r\n                                                    this.state.shipmentStatus.map(function (obj) {\r\n                                                        return <option key={'status' + obj.ID}\r\n                                                                       value={obj.ID}>{obj.Status}</option>\r\n                                                    })\r\n                                                    :\r\n                                                    <option/>\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Shipment status</label>\r\n                                        <textarea className=\"form-control\" name={\"StatusNote\"}\r\n                                              value={this.state.StatusNote}\r\n                                              onChange={this.handleChange}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </ModalScreen>\r\n                        :\r\n                        \"\"\r\n                }\r\n                <div className=\"header-group profile-template\">\r\n                    <ul className=\"page-title-group\">\r\n                        <li className=\"no-margin\"/>\r\n                        <li>\r\n                            <h1>{\r\n                              (this.state.shipmentData.length > 0) ?\r\n                                    this.state.shipmentData[0].Customer\r\n                                  : \"Customer name\"\r\n                            }</h1>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <br/>\r\n                <section className=\"page-container\">\r\n                    <div className={\"grid-wrapper\"}>\r\n                        <div className={\"data-table-container\"}>\r\n                            {\r\n                                (this.state.selectedRows.length > 0) ?\r\n                                    <div className={\"grid-toolbar context-ribbon\"}>\r\n                                        <div className=\"button-group context-left\" role=\"group\"\r\n                                             aria-label=\"Action buttons\">\r\n                                            <button type=\"button\" className=\"button button-context\"\r\n                                                    onClick={this.editOrder}>Update status\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className={\"context-right\"}>\r\n                                                    <span\r\n                                                        className={\"selected-count\"}>{this.state.selectedRows.length} selected</span>\r\n                                            <button type=\"button\" className=\"button button-context\"\r\n                                                    onClick={this.hideContextRibbon}>Cancel\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    :\r\n                                    \"\"\r\n                            }\r\n                            <ReactTable\r\n                                data={this.state.shipmentData}\r\n                                columns={this.state.columns}\r\n                                minRows={1}\r\n                                showPagination={true}\r\n                                sortable={false}\r\n                                className={\"data-table local-inv\"}\r\n                                onExpandedChange={(newExpanded, index, event, expanded) => {\r\n                                    /*console.log(newExpanded)*/\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Shipment;","import React, {Component} from 'react';\r\nimport * as signalR from '@aspnet/signalr';\r\nimport API from \"../constants/API-config\";\r\n\r\nclass Connection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentUser: '',\r\n            message: '',\r\n            messages: [],\r\n            hubConnection: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const currentUser = window.prompt('Your email:', 'sanjeebkr.paul@gmail.com');\r\n        this.setState({\r\n            currentUser\r\n        }, () => {\r\n            sessionStorage.setItem('currentUser', this.state.currentUser);\r\n\r\n            let hubConnection = new signalR.HubConnectionBuilder()\r\n                .withUrl(API.CONNECTION_ENDPOINT)\r\n                .configureLogging(signalR.LogLevel.Trace)\r\n                .build();\r\n\r\n            this.setState({\r\n                hubConnection\r\n            }, () => {\r\n                this.props.setConnectionMethod(this.state.hubConnection);\r\n                this.state.hubConnection\r\n                    .start()\r\n                    .then(() => {\r\n                        this.state.hubConnection\r\n                            .invoke('LoadNotfications', sessionStorage.getItem('currentUser'))\r\n                            .then(() => {\r\n                                console.log('LoadNotfications called');\r\n                                this.props.closeLoadingMethod();\r\n                            })\r\n                            .catch(err => console.error(err, 'Error to call LoadNotfications'));\r\n                        console.log('Connection started!');\r\n                    }).catch(err =>\r\n                        console.log(err, 'Error while establishing connection :(')\r\n                    );\r\n\r\n                this.state.hubConnection.on('getAllNotification', (user, receivedMessages) => {\r\n                    this.setState({\r\n                        messages: receivedMessages\r\n                    }, () => {\r\n                        this.props.setNotificationMethod(this.state.messages);\r\n                    });\r\n                });\r\n\r\n                this.state.hubConnection.on('getReportData', (user, reportData) => {\r\n                    console.log('getReportData',reportData);\r\n                    this.props.setReportDataMethod(reportData);\r\n                });\r\n\r\n                this.state.hubConnection.on('getNotifiedOnOrderUpdate', () => {\r\n                    this.state.hubConnection\r\n                        .invoke('LoadNotfications', sessionStorage.getItem('currentUser'))\r\n                        .then(() => {\r\n                            console.log('LoadNotfications called after update order')\r\n                        })\r\n                        .catch(err => console.error(err, 'Error to call LoadNotfications after update'));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /*sendMessage = () => {\r\n        this.state.hubConnection\r\n            .invoke('ReadNotification', this.state.currentUser, /!*notification ID this.state.message*!/)\r\n            .catch(err => console.error(err));\r\n\r\n        this.setState({message: ''});\r\n    };*/\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*<br/>\r\n                <input\r\n                    type=\"text\"\r\n                    value={this.state.message}\r\n                    onChange={e => this.setState({message: e.target.value})}\r\n                />\r\n                <button onClick={this.sendMessage}>Send</button>\r\n\r\n                <div>\r\n                    {\r\n                        this.state.messages.map((message, index) => (\r\n                            <span style={{display: 'block'}} key={index}> {message} </span>\r\n                        ))\r\n                    }\r\n                </div>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Connection;","import React, {Component} from 'react';\r\n\r\nclass Loading extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"loading-content\">\r\n                <div className=\"progress-indicator\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loading;","import 'babel-polyfill';\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport './App.css';\nimport Header from \"./componenets/header/header\";\nimport NavItems from './constants/Nav-items';\nimport MobileNav from \"./componenets/footer/mobile-nav\";\nimport Dashboard from \"./componenets/content/dashboard/dashboard\";\nimport Shipment from \"./componenets/content/shipment/shipment\";\nimport Connection from \"./socket/Connection\";\nimport Loading from \"./constants/Loading\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pageLoading: true,\n            user: null,\n            accessItems: [NavItems.DASHBOARD, NavItems.SHIPMENT, NavItems.ADMIN],\n            setAdmin: 'User Management',\n            currentLocation: true,\n            hubConnection: null,\n            notifications: [],\n            reportData: []\n        };\n    }\n\n    componentDidMount() {\n\n    }\n\n    setNotifications = (notifications) => {\n        this.setState({\n            notifications: notifications\n        },() => {\n            console.log(\"Notification received\", notifications);\n        })\n    };\n\n    setReportData = (reportData) => {\n      this.setState({\n          reportData: reportData\n      })\n    };\n\n    setHubConnection = (connection) => {\n        this.setState({\n            hubConnection: connection\n        })\n    };\n\n    closeLoading = () => {\n        this.setState({\n            pageLoading: false\n        })\n    };\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    {\n                        (this.state.pageLoading) ?\n                            <Loading/>\n                            :\n                            null\n                    }\n                    <Header\n                        accessItems={this.state.accessItems}\n                        notificationItems={this.state.notifications}\n                        hubConnection={this.state.hubConnection}\n                    />\n                    <main className={\"full-width\"}>\n                        <Connection\n                            setNotificationMethod={(nf) => this.setNotifications(nf)}\n                            setConnectionMethod={(con) => this.setHubConnection(con)}\n                            setReportDataMethod={(rd) => this.setReportData(rd)}\n                            closeLoadingMethod={this.closeLoading}\n                        />\n                        <Route exact path=\"/\" render={(match) => {\n                            return <Dashboard reportData={this.state.reportData}/>\n                        }}/>\n                        <Route path=\"/shipment\" render={(match) => {\n                            return <Shipment hubConnection={this.state.hubConnection}/>\n                        }}/>\n                    </main>\n                    <MobileNav accessItems={this.state.accessItems}/>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}